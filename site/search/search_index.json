{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"API Gateway Technical Documentation Scope This documentation is intended to provide the necessary information required to develop clients for services provided by the API Gateway. It includes specifications for each resource API in OpenAPI format, as well as supporting process and error response interpretation documentation. The following resources APIs are supported: Service Management Supporting information includes: API Gateway Client Onboarding Process API Gateway Simulator Usage API Gateway Error Response explanations","title":"API Gateway Technical Documentation"},{"location":"#api-gateway-technical-documentation","text":"","title":"API Gateway Technical Documentation"},{"location":"#scope","text":"This documentation is intended to provide the necessary information required to develop clients for services provided by the API Gateway. It includes specifications for each resource API in OpenAPI format, as well as supporting process and error response interpretation documentation. The following resources APIs are supported: Service Management Supporting information includes: API Gateway Client Onboarding Process API Gateway Simulator Usage API Gateway Error Response explanations","title":"Scope"},{"location":"apiOperationList/","text":"API Operation List Service Management Account Summary List all MSISDNs Get Invoice Get list of all VAS Get available service balances Detailed service balance on usage Suspend Service Resume Service Get Subscriber Details Get Puk Pin","title":"API Operation List"},{"location":"apiOperationList/#api-operation-list","text":"","title":"API Operation List"},{"location":"apiOperationList/#service-management","text":"Account Summary List all MSISDNs Get Invoice Get list of all VAS Get available service balances Detailed service balance on usage Suspend Service Resume Service Get Subscriber Details Get Puk Pin","title":"Service Management"},{"location":"authorisation/","text":"Authentication and Authorization Authentication is required to access the Gateway APIs. Standard Basic Access Authentication , built into the HTTP protocol, is used. Usernames and passwords are re-used from the Telkom Portal Identity and Access Management (IAM) system. This allows for password changes and resets to be manage on the Telkom Web GUI, in the same way as used for applications such as Telkom Consumer Self Service and Enterprise Self Service Portal (ESSP). NOTE: If the password is changed by a Telkom Web GUI user in the normal course of use, the API Gateway client implementation must be adjusted accordingly. Basic Access Authentication For convenience, the standard Basic Access Authentication (BAA) scheme defined in RFC 7617 is describe here, explained in the context of the Telkom Portal IAM platform. The starting point is the username and password for a registered user on Telkom Portal. For these to be usable by an API Gateway client, a profile needs to be constructed by the API Gateway Support team linking these credentials to the correct Telkom CRM Customer. This step occurs during the Phase III of the Onboarding process for the End to End verification environment, and during Phase IV for the Production environment. On the Simulator environment, in Phase II of the Onboarding process, a shared credential is used. Note that for a credential to be usable on API Gateway, neither the username nor password should contain control characters, or the colon character ( : ) as this is used in the BAA scheme as a separator. With the username and password described above, the Authorization HTTP header field is constructed and used in API Gateway HTTP requests as follows: Create a string from the username and password separated by a colon ( : ). Base64 encode the string created in step 1. Prepend the Base64(username:password) string with the string Basic (note the space). This results in the string Basic Base64(username:password) When constructing an API Gateway request, the Basic Base64(username:password) string is added as an HTTP header field with the header name Authorization . Example Given a username ExampleUsername , and a password ExamplePassword , the string to be Base64 encoded is: ExampleUsername:ExamplePassword Base64(ExampleUsername:ExamplePassword) equates to RXhhbXBsZVVzZXJuYW1lOkV4YW1wbGVQYXNzd29yZA== Basic Base64(username:password) equates to Basic RXhhbXBsZVVzZXJuYW1lOkV4YW1wbGVQYXNzd29yZA== As calculated above the Authorization header value is Basic RXhhbXBsZVVzZXJuYW1lOkV4YW1wbGVQYXNzd29yZA== The required HTTP header line is therefore Authorization: Basic RXhhbXBsZVVzZXJuYW1lOkV4YW1wbGVQYXNzd29yZA== References and Utilities Online Base64 encoder: https://www.base64encode.org/ Basic Access Authentication RFP: https://www.rfc-editor.org/rfc/pdfrfc/rfc7617.txt.pdf","title":"Authentication and Authorization"},{"location":"authorisation/#authentication-and-authorization","text":"Authentication is required to access the Gateway APIs. Standard Basic Access Authentication , built into the HTTP protocol, is used. Usernames and passwords are re-used from the Telkom Portal Identity and Access Management (IAM) system. This allows for password changes and resets to be manage on the Telkom Web GUI, in the same way as used for applications such as Telkom Consumer Self Service and Enterprise Self Service Portal (ESSP). NOTE: If the password is changed by a Telkom Web GUI user in the normal course of use, the API Gateway client implementation must be adjusted accordingly.","title":"Authentication and Authorization"},{"location":"authorisation/#basic-access-authentication","text":"For convenience, the standard Basic Access Authentication (BAA) scheme defined in RFC 7617 is describe here, explained in the context of the Telkom Portal IAM platform. The starting point is the username and password for a registered user on Telkom Portal. For these to be usable by an API Gateway client, a profile needs to be constructed by the API Gateway Support team linking these credentials to the correct Telkom CRM Customer. This step occurs during the Phase III of the Onboarding process for the End to End verification environment, and during Phase IV for the Production environment. On the Simulator environment, in Phase II of the Onboarding process, a shared credential is used. Note that for a credential to be usable on API Gateway, neither the username nor password should contain control characters, or the colon character ( : ) as this is used in the BAA scheme as a separator. With the username and password described above, the Authorization HTTP header field is constructed and used in API Gateway HTTP requests as follows: Create a string from the username and password separated by a colon ( : ). Base64 encode the string created in step 1. Prepend the Base64(username:password) string with the string Basic (note the space). This results in the string Basic Base64(username:password) When constructing an API Gateway request, the Basic Base64(username:password) string is added as an HTTP header field with the header name Authorization .","title":"Basic Access Authentication"},{"location":"authorisation/#example","text":"Given a username ExampleUsername , and a password ExamplePassword , the string to be Base64 encoded is: ExampleUsername:ExamplePassword Base64(ExampleUsername:ExamplePassword) equates to RXhhbXBsZVVzZXJuYW1lOkV4YW1wbGVQYXNzd29yZA== Basic Base64(username:password) equates to Basic RXhhbXBsZVVzZXJuYW1lOkV4YW1wbGVQYXNzd29yZA== As calculated above the Authorization header value is Basic RXhhbXBsZVVzZXJuYW1lOkV4YW1wbGVQYXNzd29yZA== The required HTTP header line is therefore Authorization: Basic RXhhbXBsZVVzZXJuYW1lOkV4YW1wbGVQYXNzd29yZA==","title":"Example"},{"location":"authorisation/#references-and-utilities","text":"Online Base64 encoder: https://www.base64encode.org/ Basic Access Authentication RFP: https://www.rfc-editor.org/rfc/pdfrfc/rfc7617.txt.pdf","title":"References and Utilities"},{"location":"errorCodes/","text":"Error Codes Error information returned from failed API calls always include standard HTTP response codes. Web APIs expect HTTP POST or GET request to application. A response will then be returned in the form of a JSON response. HTTP Response codes The HTTP response codes are included in the response header. 2XX series responses indicate success. 4XX series responses indicate an API client error. 5XX response error codes indicate a server error. Server errors include client request attribute or business rule failure scenarios, such as downstream validation failures. Code Description 201 OK: Used to indicate HTTP GET success. 201 Created: Used to indicate successful resource creation in synchronous processes. 202 Accepted: Used to indicate successful acceptance or requests in asynchronous processes. 400 Bad Request: This is used to indicate a non-specific failure, indicating that the request could not be understood by the server. 401 Unauthorized: This is returned when the request did not include valid credentials. 403 Forbidden: The user is not authorised for the operation, or resource. An error payload may be returned, providing further detail. 410 Bad Format: Either the request structure is invalid, or there are missing mandatory attributes. 500 Internal Server Error: Indicates downstream technical and business rule failures. An error payload is also returned. API Response Error Payload In cases where further information on the cause of an error is provided, it is in the form of a json response body with the following elements: resultCode One of the return parameters returning a value with the following standards. Vaule Description 0 No error has occurred. 1 An error/exception has occurred. Error codes larger than zero usually depict a business-related error. -1 An error/exception has occurred. Error codes less than 0 imply a technical error has occurred. resultMessageCode The resultMessage is not intended for customers. It provides the developer or support with more information around the reponse. friendlyCustomerMessage Reference code used by the APIs to help us with identifying problems on our side. These should map to a result code in this document payload The payload contains all the information which can be consumed by the view layer. Information is packaged up and put into the payload. In the case where an error has occurred, the payload will always be empty. Payload could be empty for successful transactions too. As example error response payload: \"resultCode\": 1, \"resultMessageCode\": \"api-bus-004\", \"resultMessage\": \"Could not retrieve billing usages history summary.\", \"friendlyCustomerMessage\": \"\", \"payload\": {} In instances where the processing failure in a downstream system, error responses from the downstream system are encoded into the response payload.","title":"Error Codes"},{"location":"errorCodes/#error-codes","text":"Error information returned from failed API calls always include standard HTTP response codes. Web APIs expect HTTP POST or GET request to application. A response will then be returned in the form of a JSON response.","title":"Error Codes"},{"location":"errorCodes/#http-response-codes","text":"The HTTP response codes are included in the response header. 2XX series responses indicate success. 4XX series responses indicate an API client error. 5XX response error codes indicate a server error. Server errors include client request attribute or business rule failure scenarios, such as downstream validation failures. Code Description 201 OK: Used to indicate HTTP GET success. 201 Created: Used to indicate successful resource creation in synchronous processes. 202 Accepted: Used to indicate successful acceptance or requests in asynchronous processes. 400 Bad Request: This is used to indicate a non-specific failure, indicating that the request could not be understood by the server. 401 Unauthorized: This is returned when the request did not include valid credentials. 403 Forbidden: The user is not authorised for the operation, or resource. An error payload may be returned, providing further detail. 410 Bad Format: Either the request structure is invalid, or there are missing mandatory attributes. 500 Internal Server Error: Indicates downstream technical and business rule failures. An error payload is also returned.","title":"HTTP Response codes"},{"location":"errorCodes/#api-response-error-payload","text":"In cases where further information on the cause of an error is provided, it is in the form of a json response body with the following elements: resultCode One of the return parameters returning a value with the following standards. Vaule Description 0 No error has occurred. 1 An error/exception has occurred. Error codes larger than zero usually depict a business-related error. -1 An error/exception has occurred. Error codes less than 0 imply a technical error has occurred. resultMessageCode The resultMessage is not intended for customers. It provides the developer or support with more information around the reponse. friendlyCustomerMessage Reference code used by the APIs to help us with identifying problems on our side. These should map to a result code in this document payload The payload contains all the information which can be consumed by the view layer. Information is packaged up and put into the payload. In the case where an error has occurred, the payload will always be empty. Payload could be empty for successful transactions too. As example error response payload: \"resultCode\": 1, \"resultMessageCode\": \"api-bus-004\", \"resultMessage\": \"Could not retrieve billing usages history summary.\", \"friendlyCustomerMessage\": \"\", \"payload\": {} In instances where the processing failure in a downstream system, error responses from the downstream system are encoded into the response payload.","title":"API Response Error Payload"},{"location":"onboardingProcess/","text":"Onboarding Process Onboarding Phases For clarity, the onboarding of API consumers is split into four phases: Phase I: Documentation Phase II: Coding and Unit testing Phase III: End to End testing Phase IV: Production implementation Phase I: Documentation The documentation phase precedes the provision of access to API platforms. The following activities are relevant to this phase: Scope Determination: Documenting which operations will be used by the API consumer, which in turn determines the scope items for the Telco internal IT Change Request process, and therefore also the test result schedules. API documentation: Provision of access to API technical documentation. Phase II: Coding and Unit testing Once the documentation is in place, access to a sandbox environment, that simulates the APIs in scope, is granted. The intention of this phase is to allow the consumer to exercise the API, observe typical behaviour, and unit test code, without an assigned ETE environment. The following activities are relevant to this phase: Technical start-up meeting: The API support team, and the API consumer technical team meet to provide a high level description of API usage, and demonstrate of the use of the sandbox. Sandbox Access: Granting of access to a simulator environment for the API operations in scope. API Consumer coding: The writing of software by the API consumer technical team. API development support: The API Support team is available for scheduled sessions to answer questions, provide guidance, and assist with troubleshooting. API Consumer unit testing: The testing of API consumer code, using the API sandbox Completion acceptance: Acceptance of API consumer code for the API operations in scope. End to End test scheduling: The assignment of the API Consumer Onboarding CR to a Scheduled Release. There are four CR Scheduled Releases in a year, and end to end testing for the API Consumer needs to be assigned to one of these. Phase III: End to End testing Once the CR scheduled release window opens, an end to end (ETE) testing environment is assigned, and the complete end to end process for API operations in scope can be validated. The following activities are relevant to this phase: Assignment of CR Project Manager: An IT project manager (PM) is assigned to the CR, to drive delivery. Assignment of ETE environment: The IT PM negotiates for a telco internal platform, with integrated back-end systems, to the Onboarding CR, for the duration of the scheduled release. Preparation of ETE environments: The teams responsible for the various integrated back-end environments deploy production versions of software to their ETE environment integrated platforms, and complete readiness testing (Business Unit Availability Testing). Creation of Test Data: The data entities in the integrated back ends necessary for end to end testing of the API operations in scope are created by the SQA team. Creation of API Consumer Gateway Profile: The profile linked to API Authentication and Authorisation is created on the ETE environment, and API endpoint and access details shared with the API consumer. Sharing of ETE testing data with the API consumer: Details of created and consumable resources, and reference data for the ENT testing is shared with the API Consumer technical team Conducting of End to End testing: API Consumer code for each operation in scope is tested against the End to End environment. ETE Troubleshooting: The API Support team is available for scheduled sessions to answer questions, provide guidance, and assist with troubleshooting of testing failures. Completion acceptance: Acceptance of API consumer code for the API operations in scope, based on successful End to End testing for each API operation. Phase IV: Production implementation Once successful end to end testing has been signed off, a production release date is scheduled. The following activities are relevant to this phase: Creation of Production API Consumer Gateway Profile: The profile linked to API Authentication and Authorisation is created on the production environment, and API endpoint and access details shared with the API consumer. The API consumer can now proceed with API transactions on the production system. Production Support: The first line API support team can be contacted using the API support process, and Production Incidents will be logged on behalf of the API consumer, if further investigation is required.","title":"Onboarding Process"},{"location":"onboardingProcess/#onboarding-process","text":"","title":"Onboarding Process"},{"location":"onboardingProcess/#onboarding-phases","text":"For clarity, the onboarding of API consumers is split into four phases: Phase I: Documentation Phase II: Coding and Unit testing Phase III: End to End testing Phase IV: Production implementation","title":"Onboarding Phases"},{"location":"onboardingProcess/#phase-i-documentation","text":"The documentation phase precedes the provision of access to API platforms. The following activities are relevant to this phase: Scope Determination: Documenting which operations will be used by the API consumer, which in turn determines the scope items for the Telco internal IT Change Request process, and therefore also the test result schedules. API documentation: Provision of access to API technical documentation.","title":"Phase I: Documentation"},{"location":"onboardingProcess/#phase-ii-coding-and-unit-testing","text":"Once the documentation is in place, access to a sandbox environment, that simulates the APIs in scope, is granted. The intention of this phase is to allow the consumer to exercise the API, observe typical behaviour, and unit test code, without an assigned ETE environment. The following activities are relevant to this phase: Technical start-up meeting: The API support team, and the API consumer technical team meet to provide a high level description of API usage, and demonstrate of the use of the sandbox. Sandbox Access: Granting of access to a simulator environment for the API operations in scope. API Consumer coding: The writing of software by the API consumer technical team. API development support: The API Support team is available for scheduled sessions to answer questions, provide guidance, and assist with troubleshooting. API Consumer unit testing: The testing of API consumer code, using the API sandbox Completion acceptance: Acceptance of API consumer code for the API operations in scope. End to End test scheduling: The assignment of the API Consumer Onboarding CR to a Scheduled Release. There are four CR Scheduled Releases in a year, and end to end testing for the API Consumer needs to be assigned to one of these.","title":"Phase II: Coding and Unit testing"},{"location":"onboardingProcess/#phase-iii-end-to-end-testing","text":"Once the CR scheduled release window opens, an end to end (ETE) testing environment is assigned, and the complete end to end process for API operations in scope can be validated. The following activities are relevant to this phase: Assignment of CR Project Manager: An IT project manager (PM) is assigned to the CR, to drive delivery. Assignment of ETE environment: The IT PM negotiates for a telco internal platform, with integrated back-end systems, to the Onboarding CR, for the duration of the scheduled release. Preparation of ETE environments: The teams responsible for the various integrated back-end environments deploy production versions of software to their ETE environment integrated platforms, and complete readiness testing (Business Unit Availability Testing). Creation of Test Data: The data entities in the integrated back ends necessary for end to end testing of the API operations in scope are created by the SQA team. Creation of API Consumer Gateway Profile: The profile linked to API Authentication and Authorisation is created on the ETE environment, and API endpoint and access details shared with the API consumer. Sharing of ETE testing data with the API consumer: Details of created and consumable resources, and reference data for the ENT testing is shared with the API Consumer technical team Conducting of End to End testing: API Consumer code for each operation in scope is tested against the End to End environment. ETE Troubleshooting: The API Support team is available for scheduled sessions to answer questions, provide guidance, and assist with troubleshooting of testing failures. Completion acceptance: Acceptance of API consumer code for the API operations in scope, based on successful End to End testing for each API operation.","title":"Phase III: End to End testing"},{"location":"onboardingProcess/#phase-iv-production-implementation","text":"Once successful end to end testing has been signed off, a production release date is scheduled. The following activities are relevant to this phase: Creation of Production API Consumer Gateway Profile: The profile linked to API Authentication and Authorisation is created on the production environment, and API endpoint and access details shared with the API consumer. The API consumer can now proceed with API transactions on the production system. Production Support: The first line API support team can be contacted using the API support process, and Production Incidents will be logged on behalf of the API consumer, if further investigation is required.","title":"Phase IV: Production implementation"},{"location":"serviceSpecification/","text":"API Documentation Releases Version Description V1.0 Initial release Request Headers The following headers are mandatory: Header Value Accept application/json Content-Type application/json Authorization OAM-Auth See the Authentication and Authorization section for details. OpenAPI Specification","title":"API Documentation"},{"location":"serviceSpecification/#api-documentation","text":"","title":"API Documentation"},{"location":"serviceSpecification/#releases","text":"Version Description V1.0 Initial release","title":"Releases"},{"location":"serviceSpecification/#request-headers","text":"The following headers are mandatory: Header Value Accept application/json Content-Type application/json Authorization OAM-Auth See the Authentication and Authorization section for details.","title":"Request Headers"},{"location":"serviceSpecification/#openapi-specification","text":"","title":"OpenAPI Specification"},{"location":"simulator/","text":"API Environments, and the API simulator Before access to the production API Gateway is provided, testing of API consumer code needs to complete, and be signed off. In order to facilitate development and testing, non-production environments are made available. The API environments are as follows: API Simulator End to End (ETE) Environment Production Environment These environments differ, as detailed in the following sections. API Simulator The API simulator is an instance of the API gateway deployed to a non-production environment, using stubbed internal integration instead of connecting to the various Telco internal systems that the ETE and Production environments do. This environment uses a pre-built profile, shared by all users of the environment. Validation of some attributes in the API payloads does not take place, as it would on any other environment. Specifically, ICCIDs Deal ID, and MSISDNs are not validated. This allows development testing to proceed without the configuration of per API consumer profiles, Deal Sheets, MSISDNs, and SIM inventories. Responses from Telco internal systems are typical of production, and the same results returned for all requests for any specific API operation. For example, in the case of a successful POST Order API operation, the same Order ID and MSISDN will always be returned. Validation of API request json payloads are therefore validated only for specific aspects, such as: Correct http headers Correct Authentication (using a shared credential) Correct json payload structure Simulation of specific failure modes is accommodated, by the inclusion of a http header. This allow for unit testing of API consumer code. Once an API consumer's code is able to successfully call all the API operations in scope, the API consumer can sign-off on unit testing, and proceed to End to End testing. End to End environment (ETE) Use of an ETE is governed by the IT Change Request (CR) process, and is scheduled into a Quarterly Release. To enable use of the ETE environment, some internal preparation is required, that is managed as part of the CR process. Internal preparation includes the following activities, which mimics the production environment: Creation of records in the Telco OSS/BSS systems for the API consumer Customer Creation of a profile with authentication and authorisation detail matching the BSS/OSS system Creation of test data for use on the ETE environment, such as MSISDNs and ICCIDs Determination of Deals IDs valid on the ETE environment Once the preparation is complete API calls can be made by the API consumer, which trigger ordering and service configuration operations in Telco internal OSS/BSS systems of the ETE environment, and API responses provide production realistic values, including validation failures. API requests therefore need to make use of valid values in the URL and payload, such as Account numbers, MSISDNs. Values returned from API operations represent responses and statuses that the API Gateway receives from Telco internal OSS/BSS systems in the ETE environment. Production Environment Similar to the ETE environment, there is preparation required on the Production environment. In this case, ICCIDs represent physical SIMs, and the Deal IDs would correspond to Deals found in the Deal Sheet provided by the Telco Account Manager. MSISDNs used in API operations would need to represent actual mobile services.","title":"API Environments, and the API simulator"},{"location":"simulator/#api-environments-and-the-api-simulator","text":"Before access to the production API Gateway is provided, testing of API consumer code needs to complete, and be signed off. In order to facilitate development and testing, non-production environments are made available. The API environments are as follows: API Simulator End to End (ETE) Environment Production Environment These environments differ, as detailed in the following sections.","title":"API Environments, and the API simulator"},{"location":"simulator/#api-simulator","text":"The API simulator is an instance of the API gateway deployed to a non-production environment, using stubbed internal integration instead of connecting to the various Telco internal systems that the ETE and Production environments do. This environment uses a pre-built profile, shared by all users of the environment. Validation of some attributes in the API payloads does not take place, as it would on any other environment. Specifically, ICCIDs Deal ID, and MSISDNs are not validated. This allows development testing to proceed without the configuration of per API consumer profiles, Deal Sheets, MSISDNs, and SIM inventories. Responses from Telco internal systems are typical of production, and the same results returned for all requests for any specific API operation. For example, in the case of a successful POST Order API operation, the same Order ID and MSISDN will always be returned. Validation of API request json payloads are therefore validated only for specific aspects, such as: Correct http headers Correct Authentication (using a shared credential) Correct json payload structure Simulation of specific failure modes is accommodated, by the inclusion of a http header. This allow for unit testing of API consumer code. Once an API consumer's code is able to successfully call all the API operations in scope, the API consumer can sign-off on unit testing, and proceed to End to End testing.","title":"API Simulator"},{"location":"simulator/#end-to-end-environment-ete","text":"Use of an ETE is governed by the IT Change Request (CR) process, and is scheduled into a Quarterly Release. To enable use of the ETE environment, some internal preparation is required, that is managed as part of the CR process. Internal preparation includes the following activities, which mimics the production environment: Creation of records in the Telco OSS/BSS systems for the API consumer Customer Creation of a profile with authentication and authorisation detail matching the BSS/OSS system Creation of test data for use on the ETE environment, such as MSISDNs and ICCIDs Determination of Deals IDs valid on the ETE environment Once the preparation is complete API calls can be made by the API consumer, which trigger ordering and service configuration operations in Telco internal OSS/BSS systems of the ETE environment, and API responses provide production realistic values, including validation failures. API requests therefore need to make use of valid values in the URL and payload, such as Account numbers, MSISDNs. Values returned from API operations represent responses and statuses that the API Gateway receives from Telco internal OSS/BSS systems in the ETE environment.","title":"End to End environment (ETE)"},{"location":"simulator/#production-environment","text":"Similar to the ETE environment, there is preparation required on the Production environment. In this case, ICCIDs represent physical SIMs, and the Deal IDs would correspond to Deals found in the Deal Sheet provided by the Telco Account Manager. MSISDNs used in API operations would need to represent actual mobile services.","title":"Production Environment"},{"location":"troubleshooting/","text":"Troubleshooting The tables below provide further information on typically encountered errors, with suggested actions. This is followed by investigation and troubleshooting advice. Validation Errors HTTP ERROR CODE ERROR MESSAGE ACTION 400 CONS-PO-0003 This service ID currently has open orders, your order cannot be processed Investigate and resolve open order on the service 400 CONS-PO-0004 Subscriber details for this MSISDN were not found. Investigate and resolve service state 500 CONS-PO 0005 This SIM number {ICCID} has already being used Investigate SIM status 500 ESB-1 Business Error Customer information: Not retrieved. Please report to the support team. Deal related errors HTTP ERROR CODE ERROR MESSAGE ACTION 400 Cons-po-0002 Requested completion date cannot be before today\u2019s date. Adjust the Requested completion date to one in the future. 500 WSE-500 Agent ID with {id} does not exist in CRM database Please report to the support team. 500 WSE-500 The deal ID is not recognised. Must be one of (valid deal IDs) Investigate Deal ID 500 WSE-500 The deal name is not recognised. Must be one of (valid deal names) Investigate Deal name Cache errors HTTP ERROR CODE ERROR MESSAGE ACTION 500 WSE-500 Web Service Business Error LPDH \u2013 Object not found for requested ID. Retry after an hour. 500 LPDH_ GOE06 Web Service Error BAN or Offer could not be found for ServiceID Please retry later. If consistent, could be a symptom of an earlier order failing, or a ceased service. 500 WSE-501 Web Service Technical Error LPDH_GCRS02: Service ID not Found in CRM, OMS or Huawei Please retry later. Communication errors HTTP ERROR CODE ERROR MESSAGE ACTION 550 WSE-501 PortalWSSOAPClientExcepion: Internal Server Error Please report to the support team. 500 WSE-501 PortalWSSOAPClientException: I/O error: Read timed out; Please report to the support team. 500 GATE-0004 Connectivity Error occurred during the service invocation Please report to the support team. 500 GATE-0004 Technical Error Timeout occurred during the service invocation Please report to the support team. Troubleshooting Orders Requested completion date Requested completion date needs to be in the future. For orders requiring immediate provisioning, a time a few minutes in the future will allow for latency before date validation. The requested completion date needs to be within the next six months. Deal IDs and Deal Names Deal reference information is provided in the form of a Deal Sheet from the Account Manager. NOTE : The string \" Deal\" should be appended to the deal names typically provided in the deal sheet. Tracking Order progress Order status queries sooner than 15 minutes of acceptance may fail due to cache latency. For asynchronous orders, the GET /cons-po/ProductOrder/v1/productOrder/{id} operation should be used Orders with a status of Negotiation are being processed. Orders with a status of Done are complete. Orders with a status of Delivery are waiting tor the future date specified, for provisioning. Orders in status Negotiation after an hour of placement should be reported to the support team. Recommended order completion polling: Query every 15 minutes till Done or Delivery, or an hour as passed. Errors Querying Orders Use the productOrderGet API /cons-po/ProductOrder/v1/productOrder/{id} to get the status of the order. WSE-500 typically indicates that asynchronous order is not yet processed, and the result not available in the LPDH cache. Retry in an hour. LPDH_GOE06 Could be a symptom of an earlier order failing, or a ceased service. Investigating Services The /cons-ac/Activation-Config/v1/service/{id} API operation should be used to query service state. The MSISDN provided on order acceptance will not reflect in caches as active immediately, and may take up to an hour to reflect in caches used for queries. Investigating SIM issues CONS-PO 0005 The SIM is already active on the network. Investigate SIM status. If you have reason to believe that a false positive on the verification, please report this to the API support team. On an end to end verification environment: Retry with a known unused ICCID from the supplied test data. Request additional end to end test ICCIDs from the Onboarding Support team if required. Reporting Issues Please provide the full request and response when reporting an issue, to assist with a quick resolution.","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"The tables below provide further information on typically encountered errors, with suggested actions. This is followed by investigation and troubleshooting advice.","title":"Troubleshooting"},{"location":"troubleshooting/#validation-errors","text":"HTTP ERROR CODE ERROR MESSAGE ACTION 400 CONS-PO-0003 This service ID currently has open orders, your order cannot be processed Investigate and resolve open order on the service 400 CONS-PO-0004 Subscriber details for this MSISDN were not found. Investigate and resolve service state 500 CONS-PO 0005 This SIM number {ICCID} has already being used Investigate SIM status 500 ESB-1 Business Error Customer information: Not retrieved. Please report to the support team.","title":"Validation Errors"},{"location":"troubleshooting/#deal-related-errors","text":"HTTP ERROR CODE ERROR MESSAGE ACTION 400 Cons-po-0002 Requested completion date cannot be before today\u2019s date. Adjust the Requested completion date to one in the future. 500 WSE-500 Agent ID with {id} does not exist in CRM database Please report to the support team. 500 WSE-500 The deal ID is not recognised. Must be one of (valid deal IDs) Investigate Deal ID 500 WSE-500 The deal name is not recognised. Must be one of (valid deal names) Investigate Deal name","title":"Deal related errors"},{"location":"troubleshooting/#cache-errors","text":"HTTP ERROR CODE ERROR MESSAGE ACTION 500 WSE-500 Web Service Business Error LPDH \u2013 Object not found for requested ID. Retry after an hour. 500 LPDH_ GOE06 Web Service Error BAN or Offer could not be found for ServiceID Please retry later. If consistent, could be a symptom of an earlier order failing, or a ceased service. 500 WSE-501 Web Service Technical Error LPDH_GCRS02: Service ID not Found in CRM, OMS or Huawei Please retry later.","title":"Cache errors"},{"location":"troubleshooting/#communication-errors","text":"HTTP ERROR CODE ERROR MESSAGE ACTION 550 WSE-501 PortalWSSOAPClientExcepion: Internal Server Error Please report to the support team. 500 WSE-501 PortalWSSOAPClientException: I/O error: Read timed out; Please report to the support team. 500 GATE-0004 Connectivity Error occurred during the service invocation Please report to the support team. 500 GATE-0004 Technical Error Timeout occurred during the service invocation Please report to the support team.","title":"Communication errors"},{"location":"troubleshooting/#troubleshooting-orders","text":"","title":"Troubleshooting Orders"},{"location":"troubleshooting/#requested-completion-date","text":"Requested completion date needs to be in the future. For orders requiring immediate provisioning, a time a few minutes in the future will allow for latency before date validation. The requested completion date needs to be within the next six months.","title":"Requested completion date"},{"location":"troubleshooting/#deal-ids-and-deal-names","text":"Deal reference information is provided in the form of a Deal Sheet from the Account Manager. NOTE : The string \" Deal\" should be appended to the deal names typically provided in the deal sheet.","title":"Deal IDs and Deal Names"},{"location":"troubleshooting/#tracking-order-progress","text":"Order status queries sooner than 15 minutes of acceptance may fail due to cache latency. For asynchronous orders, the GET /cons-po/ProductOrder/v1/productOrder/{id} operation should be used Orders with a status of Negotiation are being processed. Orders with a status of Done are complete. Orders with a status of Delivery are waiting tor the future date specified, for provisioning. Orders in status Negotiation after an hour of placement should be reported to the support team. Recommended order completion polling: Query every 15 minutes till Done or Delivery, or an hour as passed.","title":"Tracking Order progress"},{"location":"troubleshooting/#errors-querying-orders","text":"Use the productOrderGet API /cons-po/ProductOrder/v1/productOrder/{id} to get the status of the order. WSE-500 typically indicates that asynchronous order is not yet processed, and the result not available in the LPDH cache. Retry in an hour. LPDH_GOE06 Could be a symptom of an earlier order failing, or a ceased service.","title":"Errors Querying Orders"},{"location":"troubleshooting/#investigating-services","text":"The /cons-ac/Activation-Config/v1/service/{id} API operation should be used to query service state. The MSISDN provided on order acceptance will not reflect in caches as active immediately, and may take up to an hour to reflect in caches used for queries.","title":"Investigating Services"},{"location":"troubleshooting/#investigating-sim-issues","text":"CONS-PO 0005 The SIM is already active on the network. Investigate SIM status. If you have reason to believe that a false positive on the verification, please report this to the API support team. On an end to end verification environment: Retry with a known unused ICCID from the supplied test data. Request additional end to end test ICCIDs from the Onboarding Support team if required.","title":"Investigating SIM issues"},{"location":"troubleshooting/#reporting-issues","text":"Please provide the full request and response when reporting an issue, to assist with a quick resolution.","title":"Reporting Issues"}]}